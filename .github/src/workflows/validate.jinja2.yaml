# ----------------------------------------------------------------------
# |
# |  validate.yaml
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2023-07-24 16:24:57
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2023
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
name: "[callable] Validates v4-DavidBrownell_TheLanguage"

on:
  workflow_call:
    inputs:
      repo_branch:                          {type: string, required: true}
      force_setup:                          {type: boolean, required: false, default: false}
      force_activate:                       {type: boolean, required: false, default: false}
      no_cache:                             {type: boolean, required: false, default: false}

      bootstrap_branch_overrides:           {type: string, required: false}

jobs:
  _46f3c68f-5db7-469b-9b86-05592fcea3d5:
    name: "Build and Test: standard"

    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

    uses: davidbrownell/v4-Common_Foundation/.github/workflows/callable_validate.yaml@CI-v1
    with:
      job_name_prefix: "v4-DavidBrownell_TheLanguage"
      is_mixin_repository: False
      repo_name: "davidbrownell/v4-DavidBrownell_TheLanguage"
      repo_branch: "${{ inputs.repo_branch }}"
      bootstrap_branch_overrides: "${{ inputs.bootstrap_branch_overrides }}"

      os: ${{ matrix.os }}
      configuration: standard

      run_Builder: true
      run_MatchTests: true

      force_setup: ${{ inputs.force_setup }}
      force_activate: ${{ inputs.force_activate }}
      no_cache: ${{ inputs.no_cache }}

      # Use the following values to control how different test types are run:
      #
      #   0: Do not run these test types
      #   1: Run these test types without code coverage
      #   2: Run these test types with code coverage
      #   3: Run these test types with and without code coverage

      execute_UnitTests: 3
      execute_FunctionalTests: 1
      execute_IntegrationTests: 1
      execute_SystemTests: 1
      execute_LocalEndToEndTests: 1
      execute_EndToEndTests: 0
      execute_BuildVerificationTests: 0
      execute_PerformanceTests: 0

# Note that we aren't using a matrix for the os here as we want to increase overall throughput
# (rather than forcing the binary validation job to wait until all of the dev jobs are complete).
<<%
  set os_values = [
    "macos-latest",
    "ubuntu-latest",
    "windows-latest",
  ]
%>>
<<% for os in os_values %>>
  # ----------------------------------------------------------------------
  # |
  # |  <<< os >>>
  # |
  # ----------------------------------------------------------------------
  _<<< guid(os + "dev") >>>:
    name: "Build and Test: dev"
    uses: davidbrownell/v4-Common_PythonDevelopment/.github/workflows/callable_validate.yaml@CI-v1
    with:
      job_name_prefix: "v4-DavidBrownell_TheLanguage"
      repo_name: davidbrownell/v4-DavidBrownell_TheLanguage
      repo_branch: ${{ inputs.repo_branch }}
      bootstrap_branch_overrides: ${{ inputs.bootstrap_branch_overrides }}

      os: <<< os >>>
      configuration: dev

      run_PylintVerifier: true
      run_Builder: true
      run_MatchTests: true

      force_setup: ${{ inputs.force_setup }}
      force_activate: ${{ inputs.force_activate }}
      no_cache: ${{ inputs.no_cache }}

      # Use the following values to control how different test types are run:
      #
      #   0: Do not run these test types
      #   1: Run these test types without code coverage
      #   2: Run these test types with code coverage
      #   3: Run these test types with and without code coverage

      execute_UnitTests: 3
      execute_FunctionalTests: 1
      execute_IntegrationTests: 1
      execute_SystemTests: 1
      execute_LocalEndToEndTests: 1
      execute_EndToEndTests: 1
      execute_BuildVerificationTests: 1
      execute_PerformanceTests: 0

  # ----------------------------------------------------------------------
  _<<< guid() >>>:
    name: "v4-DavidBrownell_TheLanguage (<<< os >>>, dev binaries)"
    runs-on: <<< os >>>
    needs:
      - _<<< guid(os + "dev") >>>

    steps:
      - name: "[Impl] Dump Contexts"
        if: ${{ startsWith('<<< os >>>', 'ubuntu') }}
        uses: davidbrownell/v4-Common_Foundation/.github/actions/dump_contexts@CI-v1

      # outputs:
      #   - github_workspace
      #   - local_script_prefix
      #   - script_extension
      #   - shell_name
      #   - source_command
      #   - sudo_command
      #
      - name: "[Impl] Initialize OS-Specific Variables"
        id: initialize
        uses: davidbrownell/v4-Common_Foundation/.github/actions/initialize@CI-v1
        with:
          os: <<< os >>>

      # outputs:
      #   - archive_prefix
      #   - repo_dir
      #   - repo_dependencies_dir
      #
      - name: Checkout Source
        id: checkout_source
        uses: davidbrownell/v4-Common_Foundation/.github/actions/checkout_source@CI-v1
        with:
          repo_name: davidbrownell/v4-DavidBrownell_TheLanguage
          repo_branch: ${{ inputs.repo_branch }}

          os: <<< os >>>
          configuration: dev

          shell_name: ${{ steps.initialize.outputs.shell_name }}

      # TODO: # outputs:
      # TODO: #   - artifacts_dir
      # TODO: #
      # TODO: - name: Unbundle Build Artifacts
      # TODO:   id: unbundle
      # TODO:   uses: davidbrownell/v4-Common_Foundation/.github/actions/unbundle_builder_artifacts@CI-v1
      # TODO:   with:
      # TODO:     archive_prefix: ${{ steps.checkout_source.outputs.archive_prefix }}
      # TODO:     artifacts_path: src/TheLanguage/Build
      # TODO:
      # TODO:     os: <<< os >>>
      # TODO:
      # TODO:     shell_name: ${{ steps.initialize.outputs.shell_name }}
      # TODO:     working_dir: ${{ steps.initialize.outputs.github_workspace }}/artifacts
      # TODO:
      # TODO: - name: Run Test
      # TODO:   run: |
      # TODO:     python3 "${{ steps.checkout_source.outputs.repo_dir }}/src/TheLanguage/src/TheLanguage/TestFiles/Binary_BuildVerificationTest.py" "${{ steps.unbundle.outputs.artifacts_dir }}"

<<% endfor %>>
